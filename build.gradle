
ext.applicationName = "pcbnest"
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
repositories {
    jcenter()
    mavenLocal()
}

dependencies {
    compile('ch.qos.logback:logback-classic:1.2.3')
    testCompile group: 'junit', name: 'junit', version: '4.11'
    //compile files('./libs/nest4J-0.0.1.jar')
    compile files('libs/Clipper-6.4.2.jar')
    compile files('./libs/kabeja-0.4.jar')
    compile files('./libs/kabeja-svg-0.4.jar')
    compile files('libs/xml-apis-ext-1.3.04.jar')

    //compile('de.lighti:Clipper:6.4.2')
    compile group: 'com.google.code.gson', name: 'gson', version:'2.8.2'
    compile group: 'dom4j', name: 'dom4j', version:'1.6.1'
    // https://mvnrepository.com/artifact/org.apache.xmlgraphics/batik-all
    compile group: 'org.apache.xmlgraphics', name: 'batik-all', version: '1.11'
// https://mvnrepository.com/artifact/org.axsl.org.w3c.dom.svg/svg-dom-java
    compile group: 'org.axsl.org.w3c.dom.svg', name: 'svg-dom-java', version: '1.1'

    compile('org.codehaus.jackson:jackson-core-asl:1.8.6')
    compile('org.codehaus.jackson:jackson-mapper-asl:1.8.6')

}

task convert(type: Jar) {
    manifest {
        attributes 'Main-Class': 'pcbnest.utils.Converter'
    }
    //archiveName = "yourjar.jar"
    classifier 'convert'
    appendix = 'convert'
    archiveName = "cc.${extension}"
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from (sourceSets.main.output) {
        include 'pcbnest/'
        include 'nest4J/'
    }
    from (sourceSets.main.resources) {
        include '*'
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}



task pcbnest(type: Jar) {
    manifest {
        attributes 'Main-Class': 'pcbnest.PcbNest'
    }
    //archiveName = "yourjar.jar"
    classifier 'pcbnest'
    appendix = 'pcbnest'
    archiveName = "pcbnest.${extension}"
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from (sourceSets.main.output) {
        include 'pcbnest/'
        include 'nest4J/'
    }
    from (sourceSets.main.resources) {
        include '*'
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}
